openapi: 3.0.0
info:
  title: Ginkgo API Document
  version: '1.0'
  contact:
    name: Hieren
    url: 'https://github.com/hienlh'
    email: hienlh1298@gmail.com
  description: ''
servers:
  - url: 'https://micro-api-core.herokuapp.com/api/v1'
  - url: 'https://localhost:5001/api/v1'
  - url: 'http://localhost:5000/api/v1'
  - url: '{protocol}://{host}{port}/api/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: micro-api-core.herokuapp.com
      port:
        default: ''
        description: 'Example :5000'
      version:
        enum:
          - v1
        default: v1
paths:
  /image:
    post:
      servers:
        - url: 'https://api.imgur.com/3/'
      summary: Upload image by Imgur
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                album:
                  type: string
                  example: dPkd7RpwCPaPMB9
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
      security:
        - Authorization:
            - Client-ID eee6fe9fcde03e2
      tags:
        - Helper
  /users/authenticate:
    post:
      summary: Done
      operationId: post-users-authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  default: test@ginkgo.com
                  format: email
                  example: test@ginkgo.com
                Password:
                  type: string
                  default: test123
                  format: password
                  minLength: 4
                  example: test
              required:
                - Password
                - Email
      security: []
      tags:
        - User
  /users/me/tours:
    get:
      summary: 'Done, no data'
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimpleTour'
      operationId: get-users-me-tours
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
  '/users/{id}/tours':
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimpleTour'
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
          required: true
          in: path
          name: id
          example: 11
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
  /users/me/friends:
    get:
      summary: Sai du lieu tra ve
      description: '`accepted` là những người đã trở thành bạn bè .`requesting` là những người mà bạn đang gửi yêu cầu. `waiting` là những người đã gửi lời mời kết bạn cho bạn và chưa được bạn accept.'
      operationId: get-users-me-friends
      parameters:
        - schema:
            type: string
            enum:
              - accepted
              - requested
              - waiting
          in: query
          name: type
          description: Page Index
          example: accepted
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimpleUser'
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
      tags:
        - User
        - Friend
  '/users/{id}/friends':
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimpleUser'
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
      tags:
        - User
        - Friend
      parameters:
        - schema:
            type: integer
          required: true
          in: path
          name: id
          example: 11
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
      description: Chỉ lấy danh sách nhưng bạn bè đã accept
  /users/social-provider:
    post:
      summary: Done
      operationId: post-users-social-provider
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                AccessToken:
                  type: string
                  example: EAAIqXjkTrtsBANLqXmvoewZB9qwW3SbZCb9EtPqOGVnIUQXZAs3iDaaUYVenCFe90GzjPSI456tBEQW3sUqJEZCcAzyf4lu7kQ36OmFZA83KdtpZARXKb3sFNInHq7wDjr5sr0NvwoO0JXmJnYjMa4ZAqtA3EF3iCZATRUI3C3V9DZBDKm8LpBOZB0RUr1vzSGOcCbgIKlKc3m9r8TOZCdip4GR2PgrCVtbrHwxw78UuceKYUKDLpHNcZByj
                Type:
                  type: string
                  enum:
                    - facebook
                    - google
                  default: facebook
                  example: facebook
                Email:
                  type: string
                  format: email
                  example: test@ginkgo.com
              required:
                - AccessToken
                - Type
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  format: email
                  example: test@ginkgo.com
                Type:
                  type: string
                  enum:
                    - facebook
                    - google
                  default: facebook
                  example: facebook
                AccessToken:
                  type: string
                  example: EAAIqXjkTrtsBANLqXmvoewZB9qwW3SbZCb9EtPqOGVnIUQXZAs3iDaaUYVenCFe90GzjPSI456tBEQW3sUqJEZCcAzyf4lu7kQ36OmFZA83KdtpZARXKb3sFNInHq7wDjr5sr0NvwoO0JXmJnYjMa4ZAqtA3EF3iCZATRUI3C3V9DZBDKm8LpBOZB0RUr1vzSGOcCbgIKlKc3m9r8TOZCdip4GR2PgrCVtbrHwxw78UuceKYUKDLpHNcZByj
              required:
                - AccessToken
                - Type
        description: ''
      tags:
        - User
      security: []
      description: 'Phía client gửi accress token cho server, server xử lý nếu chưa có tài khoản thì tạo còn có rồi thì update thông tin trả về token login cho client. Trường hợp ko social provider không cung cấp email thì trả về lỗi thiếu email và client sẽ mở form cho user nhập thêm email và gửi lại với thêm trường email.'
  /users/me:
    get:
      summary: 'Done, thiếu social provider'
      operationId: get-users-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: number
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                required:
                  - ErrorCode
                  - Message
                  - Data
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
      tags:
        - User
    put:
      summary: ''
      operationId: put-users-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToPut'
      tags:
        - User
  /users/register:
    post:
      summary: Done
      operationId: post-users-register
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: Ginkgo
                Email:
                  type: string
                  example: test@ginkgo.com
                PhoneNumber:
                  type: string
                  example: '+84987654321'
                Password:
                  type: string
                  example: test
      tags:
        - User
      security: []
  '/users/{id}':
    get:
      summary: Done
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: number
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SimpleUser'
                required:
                  - ErrorCode
                  - Message
                  - Data
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-users-id
      description: ''
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/admin/users/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Done
      tags:
        - Admin
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: integer
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-admin-users-id
      description: Lấy thông tin 1 user
    put:
      summary: Error 3
      operationId: put-admin-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: integer
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      description: Sửa thông tin user.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserToPut'
                - type: object
                  properties:
                    Role:
                      type: string
                      enum:
                        - admin
                        - creator
                        - user
                      example: creator
      tags:
        - Admin
        - User
    delete:
      summary: Done
      operationId: delete-admin-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Xoá User
      tags:
        - Admin
        - User
  /admin/users:
    get:
      summary: Done
      tags:
        - Admin
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrrorCode:
                    type: integer
                  Message:
                    type: string
                  Pagination:
                    $ref: '#/components/schemas/Pagination'
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-admin-users
      description: Get toàn bộ user
      parameters:
        - schema:
            type: integer
            example: 1
          in: query
          name: page
          description: Số thứ tự trang
        - schema:
            type: integer
            example: 10
          in: query
          name: pageSize
          description: Số phần tử trong 1 trang
    post:
      summary: Done thua fullname
      operationId: post-admin-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: integer
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      description: Tạo User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToPost'
        description: ''
      tags:
        - Admin
        - User
  '/tour-infos/{id}/tours':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: ''
      tags:
        - Tour
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: integer
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SimpleTour'
                  Pagination:
                    $ref: '#/components/schemas/Pagination'
      operationId: get-tour-infos-id
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: pageSize
      security: []
    post:
      summary: Create tour of tour info
      tags:
        - Tour
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tour'
      operationId: post-tour-infos-tourId-tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourToPost'
  /tour-infos:
    get:
      summary: ''
      tags:
        - TourInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: integer
                  Message:
                    type: string
                  Pagination:
                    $ref: '#/components/schemas/Pagination'
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TourInfo'
      parameters:
        - schema:
            type: integer
            default: 1
          in: query
          name: page
        - schema:
            type: integer
            default: '10'
          in: query
          name: pageSize
      description: Get danh sách tour info.
      security:
        - bearerAuth: []
    parameters: []
    post:
      summary: ''
      operationId: post-tour-infos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TourInfo'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourInfoToPost'
        description: Api tạo tour info cho creator.
      tags:
        - TourInfo
  /places:
    get:
      summary: ''
      tags:
        - Place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Pagination:
                        $ref: '#/components/schemas/Pagination'
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
                    required:
                      - Data
                      - Pagination
      operationId: get-places
      description: Lấy danh sách các địa điểm du lịch.
      security: []
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: pageSize
        - schema:
            type: string
            enum:
              - city
              - other
            example: city
          in: query
          name: type
          description: 'Type có 2 loại là city và other, nếu type null, lấy cả 2 loại.'
        - schema:
            type: string
          in: query
          name: keyword
          description: Keyword dùng để search
  '/tour-infos/{id}':
    get:
      summary: ''
      tags:
        - TourInfo
      operationId: get-tours-info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TourInfo'
      parameters: []
      description: Lấy thông tin chi tiêt của một tour info.
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/places/{id}':
    get:
      summary: Lấy ra những place con
      tags:
        - Place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
                    required:
                      - Data
      description: Lấy thông tin chi tiết của địa điểm du lịch
      security: []
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  /admin/tour-infos:
    get:
      summary: ''
      tags:
        - Admin
        - TourInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Pagination:
                        $ref: '#/components/schemas/Pagination'
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TourInfo'
      operationId: get-admin-tour-infos
      description: Get danh sách tour cho admin
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: pageSize
    post:
      summary: Error
      operationId: post-admin-tour-infos
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourInfoToPost'
      tags:
        - Admin
        - TourInfo
  '/admin/tour-infos/{id}':
    get:
      summary: Error 500
      tags:
        - TourInfo
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TourInfo'
      description: Get Tour info detail cho admin
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    put:
      summary: error
      operationId: put-admin-tour-infos-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TourInfo'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourInfoToPost'
      tags:
        - TourInfo
        - Admin
    delete:
      summary: Error
      operationId: delete-admin-tour-infos-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - TourInfo
        - Admin
  /users/me/posts:
    get:
      operationId: get-users-me-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: number
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  Pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - ErrorCode
                  - Message
                  - Data
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
      tags:
        - User
        - Post
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
  '/users/{id}/posts':
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ErrorCode:
                    type: number
                  Message:
                    type: string
                  Data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  Pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - ErrorCode
                  - Message
                  - Data
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
      tags:
        - User
        - Post
      parameters:
        - schema:
            type: integer
          required: true
          in: path
          name: id
          example: 10
        - schema:
            type: integer
          in: query
          name: page
          description: Page Index
          example: 1
        - schema:
            type: integer
          in: query
          name: pageSize
          example: 10
  '/users/me/accept-friend/{userRequestId}':
    parameters:
      - schema:
          type: integer
        name: userRequestId
        in: path
        required: true
        description: Id của người gửi yêu câu
    post:
      summary: 'Chấp nhận lời mời kết bạn '
      tags:
        - User
        - Friend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
      operationId: post-users-accept-friend-userRequestId
  '/users/me/friends/{friendId}':
    parameters:
      - schema:
          type: integer
        name: friendId
        in: path
        required: true
    delete:
      summary: 'Xóa bạn bè '
      tags:
        - User
        - Friend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: delete-me-friends-friendId
  '/users/me/friends/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: Done - Thêm bạn bè
      tags:
        - User
        - Friend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-users-me-friends-id
      security:
        - bearerAuth: []
  /admin/places:
    get:
      summary: Get all places
      tags:
        - Admin
        - Place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
              examples: {}
      operationId: get-admin-places
      parameters:
        - schema:
            type: integer
            example: 1
            default: 1
          in: query
          name: page
        - schema:
            type: integer
            default: 10
            example: 10
          in: query
          name: pageSize
    post:
      summary: Error - Create place
      tags:
        - Admin
        - Place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
      operationId: post-admin-places
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceToPost'
  '/admin/places/{id}':
    get:
      summary: Get place by id
      tags:
        - Admin
        - Place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
              examples: {}
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    put:
      summary: Error
      operationId: put-admin-places-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Place'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceToPost'
      tags:
        - Admin
        - Place
    delete:
      summary: ''
      operationId: delete-admin-places-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Place
        - Admin
  '/admin/tour-infos/{id}/tours':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Tour by Id
      tags:
        - Admin
        - Tour
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tour'
      operationId: get-admin-tour-infos-tourId-tours
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: pageSize
    post:
      summary: Create tour of tour info
      tags:
        - Admin
        - Tour
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tour'
      operationId: post-admin-tour-infos-tourId-tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourToPost'
  '/admin/tour-infos/{id}/tours/{tourId}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: tourId
        in: path
        required: true
    get:
      summary: Get by id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tour'
      operationId: get-admin-tour-infos-id-tours-tourId
    put:
      summary: Edit tour
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      Data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tour'
      operationId: put-admin-tour-infos-id-tours-tourId
    delete:
      summary: Delete tour
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: delete-admin-tour-infos-id-tours-tourId
components:
  schemas:
    Pagination:
      title: Pagination
      type: object
      properties:
        TotalPage:
          type: integer
        TotalElement:
          type: integer
        CurrentPage:
          type: integer
        PageSize:
          type: integer
    SimpleUser:
      title: SimpleUser
      type: object
      x-tags:
        - User
      properties:
        Id:
          type: integer
          example: 3
        Name:
          type: string
          example: Hierren Lee
        Avatar:
          type: string
          format: uri
        Job:
          type: string
          example: Coder
        FriendType:
          type: string
          enum:
            - me
            - none
            - accepted
            - requested
            - waiting
          example: none
          description: '`none` là người dưng, `accepted` là bạn đang gửi yêu cầu kết bạn, `requested` là đối phương đang gửi yêu cầu kết bạn, `waiting` là đã thành bạn bè, `me` cho trường hợp chính bản thân'
      required:
        - Id
        - Name
    ErrorResponse:
      title: Error
      type: object
      properties:
        ErrorCode:
          default: 1
          type: integer
        Message:
          type: string
          default: Error message
      required:
        - ErrorCode
        - Message
    SocialProvider:
      title: SocialProvider
      type: object
      x-examples: {}
      x-tags:
        - User
      properties:
        Id:
          type: string
          format: uuid
        Name:
          type: string
          default: Tester
        Email:
          type: string
          format: email
          default: test@ginkgo.com
          example: test@ginkgo.com
        Avatar:
          type: string
          format: uri
        Type:
          type: string
          enum:
            - facebook
            - google
          example: facebook
          default: facebook
      required:
        - Id
        - Type
    User:
      title: User
      type: object
      description: ''
      x-tags:
        - User
      properties:
        Name:
          type: string
        Email:
          type: string
          default: test@ginkgo.com
          format: email
          example: test@ginkgo.com
        PhoneNumber:
          type: string
          example: '+8498765432'
        Address:
          type: string
        Avatar:
          type: string
          format: uri
        Slogan:
          type: string
        Bio:
          type: string
        Job:
          type: string
        Gender:
          type: string
          enum:
            - male
            - femail
            - other
        Birthday:
          type: string
          format: date-time
        SocialProviders:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SocialProvider'
        Role:
          type: string
          enum:
            - admin
            - creator
            - user
        Id:
          type: integer
      required:
        - Id
        - Email
        - PhoneNumber
    AuthResponse:
      title: AuthResponse
      type: object
      properties:
        ErrorCode:
          type: integer
        Message:
          type: string
        Data:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              Id:
                type: integer
              Token:
                type: string
      required:
        - ErrorCode
        - Message
        - Data
    PaginationResponse:
      title: PaginationResponse
      type: object
      properties:
        ErrorCode:
          type: integer
        Message:
          type: string
        Pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - ErrorCode
        - Message
        - Data
    Tour:
      title: Tour
      type: object
      description: ''
      properties:
        Id:
          type: integer
        Name:
          type: string
        StartDay:
          type: string
        EndDay:
          type: string
        TotalDay:
          type: integer
        TotalNight:
          type: integer
        Members:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUser'
        MaxMember:
          type: integer
        Timelines:
          type: array
          items:
            $ref: '#/components/schemas/Timeline'
        Services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDetail'
        TourInfo:
          $ref: '#/components/schemas/TourInfo'
        StartPlace:
          $ref: '#/components/schemas/Place'
        DestinatePlace:
          $ref: '#/components/schemas/Place'
      required:
        - Id
        - StartDay
        - EndDay
    TourToPost:
      title: TourToPost
      type: object
      description: ''
      properties:
        Name:
          type: string
          example: Tour name
        StartDay:
          type: string
          format: date-time
          example: '2020-06-12T00:00:00.000Z'
        EndDay:
          type: string
          format: date-time
          example: '2020-06-14T00:00:00.000Z'
        TotalDay:
          type: integer
          example: 2
        TotalNight:
          type: integer
          example: 2
        MaxMember:
          type: integer
          example: 5
        Timelines:
          type: array
          items:
            $ref: '#/components/schemas/TimelineToPost'
        Services:
          type: array
          items:
            type: string
          example:
            - Service1
            - Service2
        TourInfoId:
          type: integer
          example: 1
        Price:
          type: number
          example: 10000.0
      required:
        - StartDay
        - EndDay
    TourToPut:
      type: object
      description: ''
      properties:
        Name:
          type: string
        StartDay:
          type: string
        EndDay:
          type: string
        MemberIds:
          type: array
          items:
            type: integer
        MaxMember:
          type: integer
        Timelines:
          type: array
          items:
            $ref: '#/components/schemas/Timeline'
        Services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDetail'
        TourInfoId:
          type: integer
      required:
        - StartDay
        - EndDay
    SimpleTour:
      title: SimpleTour
      type: object
      properties:
        Id:
          type: integer
        Name:
          type: string
        StartDay:
          type: string
          format: date-time
        EndDay:
          type: string
          format: date-time
        TotalDay:
          type: integer
        TotalNight:
          type: integer
        TotalMember:
          type: integer
        Host:
          $ref: '#/components/schemas/SimpleUser'
        Price:
          type: number
        Friend:
          $ref: '#/components/schemas/SimpleUser'
      required:
        - Id
        - Name
        - StartDay
        - EndDay
        - TotalMember
        - Host
    Post:
      title: Post
      type: object
      properties:
        Id:
          type: integer
        Author:
          $ref: '#/components/schemas/SimpleUser'
        Content:
          type: string
          description: Nội dung bài viết
        Images:
          type: array
          description: Danh sách hình ảnh nếu có
          items:
            type: string
        TotalLike:
          type: integer
          description: Tổng lượt thích
        TotalComment:
          type: integer
          description: Tổng lượt bình luận
        FeaturedComment:
          $ref: '#/components/schemas/PostComment'
        CreateAt:
          type: string
          format: date-time
        Rating:
          type: number
      required:
        - Id
        - Author
        - Content
    PostComment:
      title: PostComment
      type: object
      properties:
        Id:
          type: integer
        Author:
          $ref: '#/components/schemas/SimpleUser'
        Content:
          type: string
          description: Nội dung bình luận
    Place:
      title: Place
      type: object
      properties:
        Id:
          type: integer
        Name:
          type: string
        Images:
          type: array
          items:
            type: string
        Description:
          type: string
        TourCount:
          type: integer
          example: 100
          description: Tong so tour trong place
    PlaceToPost:
      title: Place
      type: object
      properties:
        Name:
          type: string
        Images:
          type: array
          items:
            type: string
        Description:
          type: string
    TourInfo:
      title: TourInfo
      type: object
      properties:
        Id:
          type: string
        Name:
          type: string
        Images:
          type: array
          items:
            type: string
        StartPlace:
          $ref: '#/components/schemas/Place'
        DestinatePlace:
          $ref: '#/components/schemas/Place'
        Rating:
          type: number
      required:
        - Id
        - Name
        - Images
        - StartPlace
        - DestinatePlace
        - Rating
    Timeline:
      title: Timeline
      type: object
      properties:
        Id:
          type: integer
        TimelineDetails:
          type: array
          description: Danh sách địa điểm
          items:
            $ref: '#/components/schemas/TimelineDetail'
        Day:
          type: string
          format: date-time
          description: Ngày của timeline
        Description:
          type: string
      required:
        - Id
        - Day
    TimelineToPost:
      title: TimelineToPost
      type: object
      properties:
        TimelineDetails:
          type: array
          description: Danh sách địa điểm
          items:
            $ref: '#/components/schemas/TimelineDetailToPost'
        Day:
          type: string
          format: date-time
          example: '2020-06-13T00:00:00.000Z'
        Description:
          type: string
      required:
        - TimelineDetails
        - Day
    TimelineToPut:
      title: TimelineToPost
      type: object
      properties:
        Id:
          type: integer
        TimelineDetails:
          type: array
          description: Danh sách địa điểm
          items:
            $ref: '#/components/schemas/TimelineDetailToPost'
        Day:
          type: string
          format: date-time
          description: Ngày của timeline
        Description:
          type: string
      required:
        - Id
        - TimelineDetails
        - Day
    TimelineDetail:
      title: TimelineDetail
      type: object
      properties:
        Id:
          type: integer
        Place:
          $ref: '#/components/schemas/Place'
        Time:
          type: string
        Detail:
          type: string
      required:
        - Id
    TimelineDetailToPost:
      title: TimelineDetailToPost
      type: object
      properties:
        PlaceId:
          type: integer
          description: địa điểm
          example: 1
        Time:
          type: string
          example: 10h sang
        Detail:
          type: string
          example: 'An sang tai {{place}}'
      required:
        - Time
        - PlaceId
        - Detail
    Service:
      title: Service
      type: object
      properties:
        Id:
          type: number
          example: 1
        Name:
          type: string
          description: Tên detail
          example: Khách sạn 3 sao
        Image:
          type: string
      required:
        - Id
        - Name
        - Image
    ServiceDetail:
      title: ServiceDetail
      type: object
      properties:
        Id:
          type: number
          example: 1
        Service:
          $ref: '#/components/schemas/Service'
        Detail:
          type: string
          description: Chi tiết của detail
          example: Khách sạn Rạng Đông
      required:
        - Id
        - Service
        - Detail
    Feedback:
      title: Feedback
      type: object
      properties:
        Author:
          $ref: '#/components/schemas/SimpleUser'
        TourInfo:
          $ref: '#/components/schemas/TourInfo'
        Rating:
          type: integer
        CreateAt:
          type: string
          format: date-time
        Content:
          type: string
        TotalLike:
          type: integer
        TotalComment:
          type: integer
      required:
        - Author
        - TourInfo
        - Rating
        - CreateAt
    FeedbackComment:
      title: FeedbackComment
      type: object
      properties:
        Id:
          type: integer
        FeedbackAuthorId:
          type: integer
        TourInfoId:
          type: integer
        CreateAt:
          type: string
          format: date-time
        Content:
          type: string
        Author:
          $ref: '#/components/schemas/SimpleUser'
      required:
        - Id
        - FeedbackAuthorId
        - TourInfoId
        - CreateAt
        - Content
        - Author
    FeedbackLike:
      title: FeedbackLike
      type: object
      properties:
        Author:
          $ref: '#/components/schemas/SimpleUser'
        FeedbackAuthorId:
          type: integer
        TourInfoId:
          type: integer
        CreateAt:
          type: string
          format: date-time
      required:
        - Author
        - FeedbackAuthorId
        - TourInfoId
        - CreateAt
    UserToPut:
      title: UserToPut
      type: object
      properties:
        Name:
          type: string
          example: Name
        password:
          type: string
          example: new-password
        phoneNumber:
          type: string
          example: '+84123456789'
        address:
          type: string
          example: Địa chỉ mới
        avatar:
          type: string
          format: uri
        slogan:
          type: string
          example: Slogan mới
        bio:
          type: string
          example: Bio mới
        job:
          type: string
          example: Job mới
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        birthday:
          type: string
          format: date-time
    UserToPost:
      title: UserToPost
      type: object
      description: ''
      properties:
        Name:
          type: string
          example: Name
        Email:
          type: string
          format: email
          example: test@ginkgo.com
        Password:
          type: string
          format: password
          example: test
        PhoneNumber:
          type: string
          example: '+84987654321'
        Address:
          type: string
          example: 78 - Đường Quang Trung - Quận 15 - Thành phố Hồ Chí Minh
        Avatar:
          type: string
          format: uri
        Slogan:
          type: string
          example: Nothing
        Bio:
          type: string
          example: Nothing
        Job:
          type: string
          example: Developer
        Gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        Birthday:
          type: string
          format: date-time
        Role:
          type: string
          enum:
            - admin
            - creator
            - user
          example: user
      required:
        - Email
        - Password
    TourInfoToPost:
      title: TourInfoToPost
      type: object
      properties:
        DestinatePlaceId:
          type: integer
        StartPlaceId:
          type: integer
        Images:
          type: array
          items:
            type: string
        Name:
          type: string
          example: Tour name
      required:
        - Name
        - Images
        - StartPlaceId
        - DestinatePlaceId
    TourInfoToPut:
      title: TourInfoToPut
      type: object
      properties:
        Images:
          type: array
          items:
            type: string
        Name:
          type: string
          example: Tour name
      required:
        - Name
        - Images
  securitySchemes:
    bearerAuth:
      type: http
      description: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxIiwidW5pcXVlX25hbWUiOiJoaWVubGgxMjk4QGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsIm5iZiI6MTU5MDIyODE3MiwiZXhwIjoxNTkwODMyOTcyLCJpYXQiOjE1OTAyMjgxNzJ9.d1Yq-r9cJ_hkjBycBGdtV61WERUe4oNllV51vCtL0kc
      scheme: bearer
      bearerFormat: JWT
    Authorization:
      name: Authorization
      description: Client-ID eee6fe9fcde03e2
      type: apiKey
      in: header
security:
  - bearerAuth: []